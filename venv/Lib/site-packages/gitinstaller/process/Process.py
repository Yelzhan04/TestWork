from subprocess import Popen, PIPE

class Process:
	
	def __init__(self, cmdList):
		self.p = Popen(cmdList, stdout=PIPE, stderr=PIPE)
	
	def isDone(self):
		return self.p.poll() != None
	
	def getCode(self):
		return self.p.returncode
	
	def iterResult(self):
		for line in self.p.stdout:
			yield Process.stringify(line)
		self.p.stdout.close()
		self.p.wait() # I think to use p.poll() was a major bug,
					  # because the processes didn't finish here.
	
	def getError(self):
		out = Process.convert(self.p.stderr.read())
		self.p.stderr.close()
		return out
	
	@staticmethod
	def stringify(s):
		return Process.convert(s).rstrip()
	
	@staticmethod
	def convert(s):
		return str(s, "utf-8")
