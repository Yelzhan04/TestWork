from TopLevelError import TopLevelError

from datafile.Requirements import Requirements
from datafile.InstalledLog import InstalledLog
from Config import INSTALLED_F

from shutil import rmtree
from os import path, remove
import sys

REMOVED = "Removed %s"

class NotInstalled(TopLevelError):
	"Package {pkg} was not installed, so it cannot be uninstalled."

def uninstall(pkgs):
	with InstalledLog(INSTALLED_F) as log:
		uninstalls(pkgs, log)

# === PROTECTED === 

def uninstalls(pkgs, log):
	for pkg in pkgs:
		try:
			uninstallRun(pkg, log)
		except NotInstalled as e:
			sys.stderr.write(e.what + "\n")

def uninstallRun(pkgname, log):
	if not log.has(pkgname):
		raise NotInstalled(pkg=pkgname)
	
	for f in log.getBinaries(pkgname):
		if path.isfile(f):
			remove(f)
			print(REMOVED % f)
	
	log.rm(pkgname)
	
	r = Requirements.parse(pkgname)
	if not path.isdir(r.folder):
		raise NotInstalled(pkg=pkgname)
	
	rmtree(r.folder)
	print(REMOVED % pkgname)
